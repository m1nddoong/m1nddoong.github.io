---
layout: post
title: ""
date: 2024-02-16 14:12:20 +0900
description: You’ll find this post in your `_posts` directory. Go ahead and edit it and re-build the site to see your changes. # Add post description (optional)
img: kafka-logo.png # Add image post (optional)
fig-caption: Kotlin Logo # Add figcaption (optional)
tags: [Backend, RabbitMQ, Kafka]
---

# Kafka 란?
Kafka 란 메세지 브로그의 역할을 하는 분산형 스트리밍 플랫폼으로 대용량의 데이터를 처리하고 실시간으로 이벤트를 전송할 수 있게 해준다.
Kafka 는 Producer(생산자)가 메세지를 생성하고 Broker(브로커)에 전달하면, Broker 가 그 메세지를 Topic(주제)에 저장한다.
그리고 그 Subscribe(구독자)가 그 메세지를 가져올 수 있게 한다.


# Kafka 와 RabbitMQ 의 차이점?
Kafka와 RabbitMQ 모두 메세지 브로커로서 사용되지만 몇가지 차이점이 있다.
- `RabbitMQ`
  - 메세지 보관보다는 전달에 초점을 맞춘 Message Broker 이다.
  - 어플리케이션 간의 비동기 통신에 초점을 맞추어 기능적 측면에서의 개발에 유용하다.
- `Kafka`
  - 대량의 사건(Event)의 흐름(Stream)을 관리하고 보관한다.
  - `Kafka` 는 고가용성 이벤트 저장소로 많은 데이터를 안정적으로 관리하는데 유용하다.


# Topic & Broker
- Topic : 전달된 메세지를 분류하는 단위 
  - Partition 
    - Topic 내부에서 실제 데이터가 순차적으로 쌓이는 곳 
    - Partition의 데이터는 읽어도 사라지지 않는다.
    - 특정 규칙 (ex. Round Robin) 등에 따라 데이터를 Partition에 배부
    - Partition은 늘릴 수 있지만, 줄일 수 없다. 
- Consumer Group
  - Consumer 의 개수만큼 Partition에서 동시에 데이터를 가져온다.
    - Consumer들을 Group으로 묶으면 하나의 데이터는 Group의 하나의 Consumer만 읽는다.
    - 하지만 Consumer가 Partition보다 많으면, 일부는 놀게 한다.
  - Group 단위로 데이터를 읽은 기록을 공유한다.

- Broker
  - Kafka 가 설치된 서버
    - 여러개의 Kafka Broker 를 구성해 Cluster를 만들면, 한 서버에 문제가 생겨도 대처할 수 있다.
  - Replication
    - Broker가 여럿일 때, Replication Factor를 정의
      - 야라 개의 Broker를 거쳐 Topic의 Partition이 복제된다.
      - 실제로 메세지를 받는 Leader와 Leader의 데이터를 복제하는 Follower로 구성
    - Leader에 문제가 생기면 다른 Broker에서 Leader의 역할을 이어받는다.
      - 이후 Broker가 돌아오면 바뀐 Leader로 부터 소실된 데이터 복구 가능

- Ack
  - Producer가 데이터를 전달할 떄, Replication에 데이터가 저장되었는지 확인하는 설정
    - Ack : 0  -> 요청만
    - Ack : 1  -> Leader만 응답
    - Ack : all  -> 모든 Replication 응답 


# Kafka 설치 및 실행
**1) Zookeeper 실행** 

- 분산 아키텍처 관리용 소프트웨어

```bash
# unix
./bin/zookeeper-server-start.sh ./config/zookeeper.properties
```

**2) Kafka 실행** 

- `config/server.properties` 설정 조정 후

```bash
listeners=PLAINTEXT://localhost:9092
```

- Kafka 실행

```bash
# unix
./bin/kafka-server-start.sh config/server.properties
```

- Topic 만들기

```bash
# unix
# 생성 후 설정 확인
./bin/kafka-topics.sh --create --topic first-topic --bootstrap-server localhost:9092
./bin/kafka-topics.sh --describe --topic first-topic --bootstrap-server localhost:9092
```

- Producer, Consumer 실행 및 사용
    - `--from-beginning` : “저장된 첫 메세지부터” 의미
    
```bash
# unix
# producer
./bin/kafka-console-producer.sh --topic first-topic --bootstrap-server localhost:9092
# consumer
./bin/kafka-console-consumer.sh --topic first-topic --from-beginning --bootstrap-server localhost:9092
```

**3) 클러스터 구성해보기**

설정을 여러 개 겹치지 않게 만든다음 각각을 실행

```bash
# Broker를 구분하기 위한 설정으로, 0, 1, 2로 변경
broker.id=0

# Kafka의 HOST:PORT 설정, 9092 ~ 9094 까지 설정
listeners=PLAINTEXT://localhost:9092

# Kafka의 로그가 저장되는 위치로, 겹치지 않게
# (/tmp/kafka-logs0 ~ /tmp/kafka-logs2)
log.dirs=/tmp/kafka-logs

# 각각 실행
# unix
./bin/kafka-server-start.sh config/server9092.properties
./bin/kafka-server-start.sh config/server9093.properties
./bin/kafka-server-start.sh config/server9094.properties
```
`kafka-topics.sh` 로 확인

```bash
./bin/kafka-topics.sh --describe --topic first-rep --bootstrap-server localhost:9092
```

**4) Consumer Group 설정**

Consumer 실행 시 설정 전달

```bash
./bin/kafka-console-consumer.sh --topic first-rep --group group1 --bootstrap-server localhost:9092
./bin/kafka-console-consumer.sh --topic first-rep --group group1 --bootstrap-server localhost:9092
./bin/kafka-console-consumer.sh --topic first-rep --group group2 --bootstrap-server localhost:9092
```